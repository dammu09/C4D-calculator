// CalculatorScreen.tsx (Fixed spacing)
import React, { useState, useContext } from 'react';
import {
  View, Text, TouchableOpacity, ScrollView, Alert, 
  StatusBar, Modal, Share, TextInput, KeyboardAvoidingView, Platform
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { ThemeContext } from '../ThemeContext';
import { CustomInput, CustomButton, ResultCard } from '../Components';
import { formatCurrency, calculateLoan, generateAmortization } from '../utils';
import { Loan } from '../types';
import { styles } from '../styles';

export const CalculatorScreen: React.FC = () => {
  const { colors, currency } = useContext(ThemeContext);
  const [amount, setAmount] = useState('');
  const [rate, setRate] = useState('');
  const [termYears, setTermYears] = useState('');
  const [termMonths, setTermMonths] = useState('');
  const [showExtraPayments, setShowExtraPayments] = useState(false);
  const [extraMonthly, setExtraMonthly] = useState('');
  const [extraYearly, setExtraYearly] = useState('');
  const [prepayments, setPrepayments] = useState('');
  const [results, setResults] = useState<any>(null);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [loanName, setLoanName] = useState('');
  const scrollViewRef = React.useRef<ScrollView>(null);

  const calculate = () => {
    const loanAmount = parseFloat(amount);
    const interestRate = parseFloat(rate);
    const years = parseFloat(termYears) || 0;
    const months = parseFloat(termMonths) || 0;
    const totalTerm = years + (months / 12);
    const extraMonthlyCombined = (parseFloat(extraMonthly) || 0) + ((parseFloat(extraYearly) || 0) / 12);
    const prepay = parseFloat(prepayments) || 0;

    if (!loanAmount || !interestRate || !totalTerm) {
      Alert.alert('Error', 'Please fill in all required fields');
      return;
    }

    const base = calculateLoan(loanAmount, interestRate, totalTerm);
    const schedule = generateAmortization(loanAmount, interestRate, totalTerm, extraMonthlyCombined, prepay);
    
    const totalWithExtra = schedule.reduce((sum, row) => sum + row.payment, 0);
    const interestSaved = base.totalCost - totalWithExtra;
    const timeSaved = (totalTerm * 12) - schedule.length;

    setResults({
      monthlyPayment: base.monthlyPayment,
      totalCost: base.totalCost,
      totalWithExtra,
      interestSaved,
      timeSaved,
      schedule,
      totalInterest: base.totalCost - loanAmount
    });

    // Scroll to results section after calculation
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const saveLoan = async () => {
    if (!loanName.trim() || !results) {
      Alert.alert('Error', 'Please enter a loan name');
      return;
    }

    try {
      const loan: Loan = {
        id: Date.now().toString(),
        name: loanName.trim(),
        amount: parseFloat(amount),
        rate: parseFloat(rate),
        term: parseFloat(termYears) + ((parseFloat(termMonths) || 0) / 12),
        monthlyPayment: results.monthlyPayment,
        totalCost: results.totalCost,
        extraMonthly: (parseFloat(extraMonthly) || 0) + ((parseFloat(extraYearly) || 0) / 12),
        prepayments: parseFloat(prepayments) || 0
      };

      const saved = await AsyncStorage.getItem('savedLoans');
      const loans = saved ? JSON.parse(saved) : [];
      loans.push(loan);
      await AsyncStorage.setItem('savedLoans', JSON.stringify(loans));
      
      setShowSaveModal(false);
      setLoanName('');
      Alert.alert('Success', 'Loan saved successfully!');
    } catch (error) {
      Alert.alert('Error', 'Failed to save loan');
    }
  };

  const exportResults = async () => {
    if (!results) return;

    const summary = `C4D Calculator Results

Principal: ${formatCurrency(parseFloat(amount), currency)}
Interest Rate: ${rate}%
Term: ${termYears} years ${termMonths ? `${termMonths} months` : ''}
Monthly Payment: ${formatCurrency(results.monthlyPayment, currency)}
Total Cost: ${formatCurrency(results.totalCost, currency)}
Total Interest: ${formatCurrency(results.totalInterest, currency)}

${extraMonthly || extraYearly || prepayments ? `
With Extra Payments:
Total Cost: ${formatCurrency(results.totalWithExtra, currency)}
Interest Saved: ${formatCurrency(results.interestSaved, currency)}
Time Saved: ${results.timeSaved} months
` : ''}

Generated by C4D Calculator`;

    try {
      await Share.share({
        message: summary,
        title: 'C4D Calculator Results'
      });
    } catch (error) {
      console.log('Error sharing:', error);
    }
  };

  const clearForm = () => {
    setAmount('');
    setRate('');
    setTermYears('');
    setTermMonths('');
    setExtraMonthly('');
    setExtraYearly('');
    setPrepayments('');
    setResults(null);
    setShowExtraPayments(false);
  };

  return (
    <KeyboardAvoidingView 
      style={{ flex: 1 }} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 140 : 0}
    >
      <ScrollView 
        ref={scrollViewRef}
        style={[styles.container, { backgroundColor: colors.background }]}
        keyboardShouldPersistTaps="handled"
        contentInsetAdjustmentBehavior="automatic"
      >
      <StatusBar barStyle={colors.text === '#1e293b' ? 'dark-content' : 'light-content'} />

      <View style={[styles.section, styles.premiumCard, { backgroundColor: colors.surface }]}>
        <Text style={[styles.sectionTitle, { color: colors.text }]}>Loan Details</Text>
        
        <CustomInput
          label="Loan Amount"
          value={amount}
          onChangeText={setAmount}
          placeholder="Enter loan amount"
        />
        
        <CustomInput
          label="Interest Rate"
          value={rate}
          onChangeText={setRate}
          placeholder="Enter interest rate"
          suffix="%"
        />
        
        {/* Loan Term - Simple & Working */}
        <View style={{ marginBottom: 16 }}>
          <Text style={[styles.inputLabel, { color: colors.text }]}>Loan Term</Text>
          <View style={{ flexDirection: 'row', gap: 12, marginTop: 8 }}>
            {/* Years Input - Simple */}
            <View style={{ flex: 1 }}>
              <View style={{
                borderWidth: 1.5,
                borderColor: colors.border,
                borderRadius: 14,
                backgroundColor: colors.background,
                height: 52,
                justifyContent: 'center',
                paddingHorizontal: 16
              }}>
                <TextInput
                  style={{
                    fontSize: 17,
                    fontWeight: '600',
                    color: '#000000', // Hard-coded black
                    textAlign: 'left'
                  }}
                  value={termYears}
                  onChangeText={setTermYears}
                  placeholder="30"
                  placeholderTextColor="#999999"
                  keyboardType="numeric"
                />
                <Text style={{
                  position: 'absolute',
                  right: 16,
                  color: '#666666',
                  fontSize: 12,
                  fontWeight: '600'
                }}>
                  Years
                </Text>
              </View>
            </View>
            
            {/* Months Input - Simple */}
            <View style={{ flex: 1 }}>
              <View style={{
                borderWidth: 1.5,
                borderColor: colors.border,
                borderRadius: 14,
                backgroundColor: colors.background,
                height: 52,
                justifyContent: 'center',
                paddingHorizontal: 16
              }}>
                <TextInput
                  style={{
                    fontSize: 17,
                    fontWeight: '600',
                    color: '#000000', // Hard-coded black
                    textAlign: 'left'
                  }}
                  value={termMonths}
                  onChangeText={setTermMonths}
                  placeholder="0"
                  placeholderTextColor="#999999"
                  keyboardType="numeric"
                />
                <Text style={{
                  position: 'absolute',
                  right: 16,
                  color: '#666666',
                  fontSize: 12,
                  fontWeight: '600'
                }}>
                  Months
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>

      <TouchableOpacity
        style={[styles.extraPaymentToggle, { backgroundColor: colors.surface, borderColor: colors.border }]}
        onPress={() => setShowExtraPayments(!showExtraPayments)}
      >
        <Text style={[styles.extraPaymentToggleText, { color: colors.text }]}>
          Extra Payments (Optional)
        </Text>
        <Text style={[styles.extraPaymentToggleIcon, { color: colors.primary }]}>
          {showExtraPayments ? '−' : '+'}
        </Text>
      </TouchableOpacity>

      {showExtraPayments && (
        <View style={[styles.section, styles.premiumCard, { backgroundColor: colors.surface }]}>
          <CustomInput
            label="Extra Monthly Payment"
            value={extraMonthly}
            onChangeText={setExtraMonthly}
            placeholder="Enter extra monthly payment"
          />
          
          <CustomInput
            label="Extra Yearly Payment"
            value={extraYearly}
            onChangeText={setExtraYearly}
            placeholder="Enter extra yearly payment"
          />
          
          <CustomInput
            label="Initial Prepayment"
            value={prepayments}
            onChangeText={setPrepayments}
            placeholder="Enter upfront prepayment"
          />
        </View>
      )}

      <View style={styles.buttonRow}>
        <CustomButton title="Calculate" onPress={calculate} />
        <CustomButton title="Clear" onPress={clearForm} variant="outline" />
      </View>

      {results && (
        <View style={[styles.section, styles.premiumCard, { backgroundColor: colors.surface }]}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>Results</Text>
          
          <View style={styles.resultsContainer}>
            <View style={styles.resultRow}>
              <ResultCard
                title="Monthly Payment"
                value={formatCurrency(results.monthlyPayment, currency)}
                color={colors.primary}
                icon="💳"
              />
              <ResultCard
                title="Total Interest"
                value={formatCurrency(results.totalInterest, currency)}
                color={colors.warning}
                icon="📈"
              />
            </View>
            
            <View style={styles.resultRow}>
              <ResultCard
                title="Total Cost"
                value={formatCurrency(results.totalCost, currency)}
                icon="💰"
              />
              {(parseFloat(extraMonthly) > 0 || parseFloat(extraYearly) > 0 || parseFloat(prepayments) > 0) && (
                <ResultCard
                  title="New Total Cost"
                  value={formatCurrency(results.totalWithExtra, currency)}
                  color={colors.success}
                  icon="✨"
                />
              )}
            </View>
            
            {(parseFloat(extraMonthly) > 0 || parseFloat(extraYearly) > 0 || parseFloat(prepayments) > 0) && (
              <View style={styles.resultRow}>
                <ResultCard
                  title="Interest Saved"
                  value={formatCurrency(results.interestSaved, currency)}
                  subtitle={`${results.timeSaved} months earlier`}
                  color={colors.success}
                  icon="💎"
                />
                <ResultCard
                  title="Time Saved"
                  value={`${results.timeSaved} months`}
                  subtitle={`${(results.timeSaved / 12).toFixed(1)} years`}
                  color={colors.success}
                  icon="⏰"
                />
              </View>
            )}
          </View>

          <View style={styles.actionButtons}>
            <CustomButton
              title="Save Loan"
              onPress={() => setShowSaveModal(true)}
              variant="outline"
            />
            <CustomButton
              title="Export"
              onPress={exportResults}
              variant="secondary"
            />
          </View>
        </View>
      )}

      <Modal visible={showSaveModal} animationType="slide" transparent>
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContent, { backgroundColor: colors.surface }]}>
            <Text style={[styles.modalTitle, { color: colors.text }]}>Save Loan</Text>
            
            <CustomInput
              label="Loan Name"
              value={loanName}
              onChangeText={setLoanName}
              placeholder="Enter loan name"
              keyboardType="default"
            />
            
            <View style={styles.modalButtons}>
              <CustomButton
                title="Cancel"
                onPress={() => setShowSaveModal(false)}
                variant="outline"
              />
              <CustomButton
                title="Save"
                onPress={saveLoan}
              />
            </View>
          </View>
        </View>
      </Modal>
    </ScrollView>
    </KeyboardAvoidingView>
  );
};